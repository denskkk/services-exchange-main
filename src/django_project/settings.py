"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

from django.urls import reverse_lazy
from environs import Env

env = Env()
env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

SECRET_KEY = env.str("SECRET_KEY")
DEBUG = env.bool("DEBUG", False)

# Hosts and CSRF
# Read from environment for flexibility across deployments (Docker, PythonAnywhere, etc.)
# Example: ALLOWED_HOSTS="example.com,localhost,127.0.0.1"
ALLOWED_HOSTS = env.list(
    "ALLOWED_HOSTS",
    default=[
        "localhost",
        "127.0.0.1",
        "0.0.0.0",
        # Production host
        "exchange.amgold.ru",
        # Common PaaS suffix
        ".pythonanywhere.com",
    ],
)

# Reference: https://docs.djangoproject.com/en/4.2/ref/settings/#csrf-trusted-origins
CSRF_TRUSTED_ORIGINS = env.list(
    "CSRF_TRUSTED_ORIGINS",
    default=[
        "http://exchange.amgold.ru",
        "https://exchange.amgold.ru",
    ],
)

if DEBUG:
    # Configure DJDT to show up in Docker
    DEBUG_TOOLBAR_CONFIG = {
        "SHOW_TOOLBAR_CALLBACK": lambda request: bool(
            request.headers.get("x-requested-with") != "XMLHttpRequest"
        ),
    }

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    "debug_toolbar",
    "allauth",
    "allauth.account",
    "crispy_forms",
    "crispy_tailwind",
    # Local apps
    "users.apps.UsersConfig",
    "core.apps.CoreConfig",
    "exchange.apps.ExchangeConfig",
    "services.apps.ServicesConfig",
    "projects.apps.ProjectsConfig",
    "orders.apps.OrdersConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # django-allauth:
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "django_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # Local
                "exchange.context_processors.user_mode",
            ],
        },
    },
]

WSGI_APPLICATION = "django_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Database
# Default: PostgreSQL via env. Optional: set DB_ENGINE=sqlite to use SQLite (e.g., on PythonAnywhere free tier).
DB_ENGINE = env.str("DB_ENGINE", default="postgres")

if DB_ENGINE.lower() == "sqlite":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": env("DB_NAME"),
            "USER": env("DB_USER"),
            "PASSWORD": env("DB_PASSWORD"),
            "HOST": env("DB_HOST"),
            "PORT": env("DB_PORT"),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "ru-RU"
TIME_ZONE = "Europe/Moscow"
USE_I18N = True
USE_TZ = True

# Media

MEDIA_URL = "/uploads/"
MEDIA_ROOT = BASE_DIR / "uploads"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
    BASE_DIR / "static/dist",
]
STATIC_ROOT = BASE_DIR / "staticfiles"

STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        # WhiteNoise compression with caching
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}
WHITENOISE_MANIFEST_STRICT = False

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Authentication

AUTH_USER_MODEL = "users.CustomUser"
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by email
    "allauth.account.auth_backends.AuthenticationBackend",
]

LOGIN_REDIRECT_URL = reverse_lazy("core:index")
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_SIGNUP_REDIRECT_URL = reverse_lazy("core:index")
ACCOUNT_LOGOUT_REDIRECT_URL = reverse_lazy("core:index")


# Redis
REDIS_HOST = env.str("REDIS_HOST", "redis")
REDIS_PORT = env.int("REDIS_PORT", 6379)
REDIS_DB = env.int("REDIS_DB", 0)


# Celery
CELERY_BROKER_URL = "redis://redis:6379"


# Logging

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {"require_debug": {"()": "django.utils.log.RequireDebugTrue"}},
    "formatters": {
        "basic": {
            "format": "%(asctime)s | %(levelname)s | %(name)s | %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console_dev": {
            "class": "logging.StreamHandler",
            "formatter": "basic",
            "filters": ["require_debug"],
        },
        "django_file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": "django_debug.log",
            "maxBytes": 1024 * 1024 * 10,
            "backupCount": 3,
            "formatter": "basic",
        },
        "server_file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": "server_debug.log",
            "maxBytes": 1024 * 1024 * 10,
            "backupCount": 3,
            "formatter": "basic",
        },
    },
    "loggers": {
        "": {
            "handlers": ["console_dev", "django_file"],
            "level": "DEBUG" if DEBUG else "INFO",
        },
        "django.request": {
            "handlers": ["console_dev", "server_file"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
    },
}


# Crispy Forms

CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"


# Sentry

if SENTRY_DSN := env.str("SENTRY_DSN", None):  # noqa: C901
    import sentry_sdk

    def sentry_before_send(event: dict, hint: dict) -> dict | None:
        """
        Filters Sentry events before sending.

        This function filters out handled exceptions and logged errors.
        By doing this we will only receive unhandled exceptions on Sentry.

        :param dict event: The event dictionary containing exception data.
        :param dict hint: Additional information about the event, including
                the original exception.
        :return: The modified event dictionary, or None if the event should be
                ignored.
        """

        # Ignore logged errors
        if "logger" in event:
            return None

        # Ignore handled exceptions
        exceptions = event.get("exception", {}).get("values", [])
        if exceptions:
            exc = exceptions[-1]
            mechanism = exc.get("mechanism")

            if mechanism:
                if mechanism.get("handled"):
                    return None

        return event

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        traces_sample_rate=0.5,
        before_send=sentry_before_send,
    )
